---
# File: tasks/main.yml - Main tasks for Consul

- name: Check distribution compatibility
  fail:
    msg: "{{ ansible_distribution }} is not supported by this role"
  when: ansible_distribution not in ['RedHat', 'CentOS', 'Debian', 'Ubuntu']

- name: Fail if not a new release of Red Hat / CentOS
  fail:
    msg: "{{ ansible_distribution_version }} is not an acceptable version of {{ ansible_distribution }} for this role"
  when: ansible_distribution in ['RedHat', 'CentOS'] and ansible_distribution_version|version_compare(7, '<')

- name: Fail if not a new release of Debian
  fail:
    msg: "{{ ansible_distribution_version }} is not an acceptable version of {{ ansible_distribution }} for this role"
  when: ansible_distribution == "Debian" and ansible_distribution_version|version_compare(8.5, '<')

- name: Fail if not a new release of Ubuntu
  fail:
    msg: "{{ ansible_distribution_version }} is not an acceptable version of {{ ansible_distribution }} for this role"
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version|version_compare(13.04, '<')

- name: Fail if iptables is enabled for Red Hat / CentOS
  fail:
    msg: "No support for iptables on {{ ansible_distribution }}, use dnsmasq instead"
  when: consul_iptables_enable and
        (ansible_distribution in ['RedHat', 'CentOS'] and ansible_distribution_version|version_compare(7, '>='))

- name: Fail if both dnsmasq and iptables are enabled
  fail:
    msg: "DNS Forwarding via both dnsmasq and iptables is not supported, enable only one option"
  when: consul_dnsmasq_enable and consul_iptables_enable

- name: Fail if iptables is enabled but no recursors are defined
  fail:
    msg: "If iptables is enabled recursors are required"
  when: consul_iptables_enable and consul_recursors|length == 0

- name: Add Consul user
  user: "name=consul comment='Consul user' uid=1042 group=bin"

- name: Install specified packages
  include: "{{ ansible_distribution }}.yml"

- block:
    - name: Generate gossip encryption key
      shell: "PATH=/usr/local/bin:$PATH consul keygen"
      register: consul_keygen
      run_once: true
    - name: Save encryption key
      set_fact: consul_raw_key={{ consul_keygen.stdout }}
  when: consul_raw_key is not defined

- name: Directories
  file: "dest={{ item }} state=directory owner={{ consul_user }} group={{ consul_group}}"
  with_items:
    - /opt/consul
    - /var/consul
    - /var/log/consul
    - /var/run/consul
    - /etc/consul.d
    - /etc/consul.d/bootstrap
    - /etc/consul.d/client
    - /etc/consul.d/server

- name: Bootstrap configuration
  template: "src=server_bootstrap_config.json.j2 dest={{ consul_config_path }}/bootstrap/config.json"

- name: Client configuration
  template: src=client_config.json.j2 dest={{ consul_config_path }}/client/config.json

- name: Server configuration
  template: src=server_config.json.j2 dest={{ consul_config_path }}/server/config.json

- include: ../tasks/acl.yml
  when: consul_acl_enable

- name: Atlas configuration
  template: src=config_atlas.json.j2 dest={{ consul_config_path }}/{{ item }}/config_atlas.json
  with_items:
    - bootstrap
    - server
  when: consul_atlas_enable

- name: SYSV init script
  template: src=consul_sysvinit.j2 dest=/etc/init.d/consul owner=root group=root mode=755
  when: not ansible_service_mgr == "systemd" and not ansible_os_family == "Debian"

- name: Debian init script
  template: src=consul_debian.init.j2 dest=/etc/init.d/consul owner=root group=root mode=755
  when: not ansible_service_mgr == "systemd" and ansible_distribution == "Debian"

- name: systemd script
  template: src=consul_systemd.service.j2 dest=/lib/systemd/system/consul.service owner=root group=root mode=644
  when: ansible_service_mgr == "systemd"

- name: Start Consul
  service: name=consul state=started enabled=yes

- name: Consul up?
  wait_for: delay=5 path=/var/run/consul/consul.pid state=present

- block:
    - name: Reconfigure bootstrap node (systemd)
      replace: dest=/lib/systemd/system/consul.service regexp='bootstrap' replace='server' backup=no
    - name: Reload unit configuration
      shell: systemctl daemon-reload
      notify:
        - restart consul
  when: consul_node_role == "bootstrap" and ansible_service_mgr == "systemd"

- name: Reconfigure bootstrap node (init.d)
  replace: dest=/etc/init.d/consul regexp='bootstrap' replace='server' backup=no
  when: consul_node_role == "bootstrap" and not ansible_service_mgr == "systemd" and ansible_distribution_major_version|int <= 7

- include: ../tasks/dnsmasq.yml
  when: consul_dnsmasq_enable

- include: ../tasks/iptables.yml
  when: consul_iptables_enable

- include: ../tasks/client.yml
  when: consul_node_role == "client" and ansible_os_family == "Debian"
